// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  name              String
  email             String     @unique
  password          String
  bio               String?
  avatarUrl         String?
  role              Role       @default(LEARNER)
  timeZone          String?
  createdAt         DateTime   @default(now())
  skillsOffered     Skill[]    @relation("SkillsOffered")
  skillsWanted      Skill[]    @relation("SkillsWanted")
  sessionsAsMentor  Session[]  @relation("MentorSessions")
  sessionsAsLearner Session[]  @relation("LearnerSessions")
  sentConnections     Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")
  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")
}

model Skill {
  id        String    @id @default(uuid())
  name      String
  category  String?
  offeredBy User[]    @relation("SkillsOffered")
  wantedBy  User[]    @relation("SkillsWanted")
  sessions  Session[] @relation("SkillSessions")
}

model Connection {
  id         String            @id @default(uuid())
  sender     User              @relation("SentConnections", fields: [senderId], references: [id])
  senderId   String
  receiver   User              @relation("ReceivedConnections", fields: [receiverId], references: [id])
  receiverId String
  status     ConnectionStatus  @default(PENDING)
  createdAt  DateTime          @default(now())
}

model Follow {
  id         String  @id @default(uuid())
  follower   User    @relation("Following", fields: [followerId], references: [id])
  followerId String
  following  User    @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt  DateTime @default(now())

  @@unique([followerId, followingId]) // Prevent duplicate follows
}

model Session {
  id          String        @id @default(uuid())
  mentor      User          @relation("MentorSessions", fields: [mentorId], references: [id])
  mentorId    String
  learner     User          @relation("LearnerSessions", fields: [learnerId], references: [id])
  learnerId   String
  skill       Skill         @relation("SkillSessions", fields: [skillId], references: [id])
  skillId     String
  scheduledAt DateTime
  status      SessionStatus @default(PENDING)
  feedback    String?
  createdAt   DateTime      @default(now())
}

enum Role {
  MENTOR
  LEARNER
  BOTH
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum SessionStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
 